#install.packages("ggplot2")
#install.packages("devtools")
#install.packages("ggcorrplot")
#devtools::install_github("laresbernardo/lares")
#devtools::install_github("ProcessMiner/nlcor")
#install.packages("ISLR2")
#devtools::install_github("kassambara/ggpubr")
#install.packages("zoo")
#install.packages("ROSE")
#install.packages("e1071")
#install.packages("klaR")
#install.packages("treemapify")
#install.packages("glmnet")
install.packages("lmtest")
# Libraries
library(knitr)
library(tidyverse)
library(ggplot2)
library(forcats)
library(dplyr)
library(ggcorrplot)
library(lares)
library(treemapify)
library(MASS)
library(devtools)
library(ISLR2)
library(ggpubr)
library(zoo)
library(reshape2)
library(ROSE) # for undersampling/oversampling
library(e1071) # for naive Bayes
library(caret)
library(klaR)
library(car) # for calculation of VIF in multiple linear regression
library(glmnet)
library(choroplethr)
library(choroplethrMaps)
library(kableExtra)
library(magrittr)
library("lmtest"") # for Breusch Pagan Test to check homoskedasticity
# Installs
#install.packages("caret")
#install.packages("car")
#install.packages("ggplot2")
#install.packages("devtools")
#install.packages("ggcorrplot")
#devtools::install_github("laresbernardo/lares")
#devtools::install_github("ProcessMiner/nlcor")
#install.packages("ISLR2")
#devtools::install_github("kassambara/ggpubr")
#install.packages("zoo")
#install.packages("ROSE")
#install.packages("e1071")
#install.packages("klaR")
#install.packages("treemapify")
#install.packages("glmnet")
#install.packages("lmtest")
# Libraries
library(knitr)
library(tidyverse)
library(ggplot2)
library(forcats)
library(dplyr)
library(ggcorrplot)
library(lares)
library(treemapify)
library(MASS)
library(devtools)
library(ISLR2)
library(ggpubr)
library(zoo)
library(reshape2)
library(ROSE) # for undersampling/oversampling
library(e1071) # for naive Bayes
library(caret)
library(klaR)
library(car) # for calculation of VIF in multiple linear regression
library(glmnet)
library(choroplethr)
library(choroplethrMaps)
library(kableExtra)
library(magrittr)
library("lmtest"") # for Breusch Pagan Test to check homoskedasticity
# Installs
#install.packages("caret")
#install.packages("car")
#install.packages("ggplot2")
#install.packages("devtools")
#install.packages("ggcorrplot")
#devtools::install_github("laresbernardo/lares")
#devtools::install_github("ProcessMiner/nlcor")
#install.packages("ISLR2")
#devtools::install_github("kassambara/ggpubr")
#install.packages("zoo")
#install.packages("ROSE")
#install.packages("e1071")
#install.packages("klaR")
#install.packages("treemapify")
#install.packages("glmnet")
#install.packages("lmtest")
# Libraries
library(knitr)
library(tidyverse)
library(ggplot2)
library(forcats)
library(dplyr)
library(ggcorrplot)
library(lares)
library(treemapify)
library(MASS)
library(devtools)
library(ISLR2)
library(ggpubr)
library(zoo)
library(reshape2)
library(ROSE) # for undersampling/oversampling
library(e1071) # for naive Bayes
library(caret)
library(klaR)
library(car) # for calculation of VIF in multiple linear regression
library(glmnet)
library(choroplethr)
library(choroplethrMaps)
library(kableExtra)
library(magrittr)
library("lmtest") # for Breusch Pagan Test to check homoskedasticity
install.packages("lmtest")
# Installs
#install.packages("caret")
#install.packages("car")
#install.packages("ggplot2")
#install.packages("devtools")
#install.packages("ggcorrplot")
#devtools::install_github("laresbernardo/lares")
#devtools::install_github("ProcessMiner/nlcor")
#install.packages("ISLR2")
#devtools::install_github("kassambara/ggpubr")
#install.packages("zoo")
#install.packages("ROSE")
#install.packages("e1071")
#install.packages("klaR")
#install.packages("treemapify")
#install.packages("glmnet")
# Libraries
library(knitr)
library(tidyverse)
library(ggplot2)
library(forcats)
library(dplyr)
library(ggcorrplot)
library(lares)
library(treemapify)
library(MASS)
library(devtools)
library(ISLR2)
library(ggpubr)
library(zoo)
library(reshape2)
library(ROSE) # for undersampling/oversampling
library(e1071) # for naive Bayes
library(caret)
library(klaR)
library(car) # for calculation of VIF in multiple linear regression
library(glmnet)
library(choroplethr)
library(choroplethrMaps)
library(kableExtra)
library(magrittr)
# Read the dataset
df <- read.csv("~/Luis/Universidad/Master_DS/Second_semester/Statistical_Learning/Project/Sample-Superstore.csv",header=TRUE)
#kable(df[1:5,])
df[1:15,] %>%
kable(format = "html", col.names = colnames(df)) %>%
column_spec(c(2:21), width_min = "0.8in")  %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300px")
df_envelop <- df %>% filter(`Sub.Category`=='Labels')
row.number <- sample(1:nrow(df_envelop), 0.8*nrow(df_envelop))
train = df_envelop[row.number,]
test = df_envelop[-row.number,]
dim(train)
dim(test)
lm.fit <- lm(Profit ~ Sales, data = train)
summary(lm.fit)
confint(lm.fit)
lm.fit <- lm(Profit ~ log(Sales), data = train)
summary(lm.fit)
confint(lm.fit)
ggplot(train, aes(x = Sales, y = Profit)) +
geom_point(color="#80b1d3", size = 3, alpha=.9) +
scale_y_continuous(label = scales::dollar) +
scale_x_continuous(label = scales::dollar) +
labs(x = "Sales", y = "Profit") + theme_minimal() +
theme(axis.text=element_text(size=14), axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18)) + geom_abline(slope = coef(lm.fit)[["Sales"]],
intercept = coef(lm.fit)[["(Intercept)"]])
par(mfrow = c(2, 2))
plot(lm.fit)
lm.fit <- lm(Profit ~ sqrt(Sales), data = train)
summary(lm.fit)
confint(lm.fit)
ggplot(train, aes(x = Sales, y = Profit)) +
geom_point(color="#80b1d3", size = 3, alpha=.9) +
scale_y_continuous(label = scales::dollar) +
scale_x_continuous(label = scales::dollar) +
labs(x = "Sales", y = "Profit") + theme_minimal() +
theme(axis.text=element_text(size=14), axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18)) + geom_abline(slope = coef(lm.fit)[["Sales"]],
intercept = coef(lm.fit)[["(Intercept)"]])
lm.fit <- lm(Profit ~ sqrt(Sales), data = train)
summary(lm.fit)
confint(lm.fit)
df_envelop <- df %>% filter(`Sub.Category`=='Labels')
row.number <- sample(1:nrow(df_envelop), 0.8*nrow(df_envelop))
train = df_envelop[row.number,]
test = df_envelop[-row.number,]
dim(train)
dim(test)
lm.fit <- lm(Profit ~ sqrt(Sales), data = train)
summary(lm.fit)
confint(lm.fit)
ggplot(train, aes(x = Sales, y = Profit)) +
geom_point(color="#80b1d3", size = 3, alpha=.9) +
scale_y_continuous(label = scales::dollar) +
scale_x_continuous(label = scales::dollar) +
labs(x = "Sales", y = "Profit") + theme_minimal() +
theme(axis.text=element_text(size=14), axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18)) + geom_abline(slope = coef(lm.fit)[["Sales"]],
intercept = coef(lm.fit)[["(Intercept)"]])
lm.fit <- lm(Profit ~ I(Sales^2), data = train)
summary(lm.fit)
confint(lm.fit)
par(mfrow = c(2, 2))
plot(lm.fit)
lm.fit <- lm(Profit ~ 1/Sales, data = train)
summary(lm.fit)
confint(lm.fit)
par(mfrow = c(2, 2))
plot(lm.fit)
lm.fit <- lm(log(Profit) ~ Sales, data = train)
summary(lm.fit)
confint(lm.fit)
par(mfrow = c(2, 2))
plot(lm.fit)
lm.fit <- lm(sqrt(Profit) ~ Sales, data = train)
summary(lm.fit)
confint(lm.fit)
par(mfrow = c(2, 2))
plot(lm.fit)
par(mfrow = c(2, 2))
plot(lm.fit)
set.seed(1)
row.number <- sample(1:nrow(df), 0.8*nrow(df))
train = df[row.number,]
test = df[-row.number,]
dim(train)
dim(test)
lm_mult = train(
form = Profit ~ Sales + Quantity + Segment + Discount + Processing.Time + Ship.Mode + Region + Sub.Category + Gross.Margin,
data = train,
trControl = trainControl(method = "cv", number = 5),
method = "lm"
)
lm_mult
summary(lm_mult)
# Installs
#install.packages("caret")
#install.packages("car")
#install.packages("ggplot2")
#install.packages("devtools")
#install.packages("ggcorrplot")
#devtools::install_github("laresbernardo/lares")
#devtools::install_github("ProcessMiner/nlcor")
#install.packages("ISLR2")
#devtools::install_github("kassambara/ggpubr")
#install.packages("zoo")
#install.packages("ROSE")
#install.packages("e1071")
#install.packages("klaR")
#install.packages("treemapify")
#install.packages("glmnet")
# Libraries
library(knitr)
library(tidyverse)
library(ggplot2)
library(forcats)
library(dplyr)
library(ggcorrplot)
library(lares)
library(treemapify)
library(MASS)
library(devtools)
library(ISLR2)
library(ggpubr)
library(zoo)
library(reshape2)
library(ROSE) # for undersampling/oversampling
library(e1071) # for naive Bayes
library(caret)
library(klaR)
library(car) # for calculation of VIF in multiple linear regression
library(glmnet)
library(choroplethr)
library(choroplethrMaps)
library(kableExtra)
library(magrittr)
# Read the dataset
df <- read.csv("~/Luis/Universidad/Master_DS/Second_semester/Statistical_Learning/Project/Sample-Superstore.csv",header=TRUE)
#kable(df[1:5,])
df[1:15,] %>%
kable(format = "html", col.names = colnames(df)) %>%
column_spec(c(2:21), width_min = "0.8in")  %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300px")
set.seed(1)
row.number <- sample(1:nrow(df), 0.8*nrow(df))
train = df[row.number,]
test = df[-row.number,]
dim(train)
dim(test)
lm_mult = train(
form = Profit ~ Sales + Quantity + Segment + Discount + Processing.Time + Ship.Mode + Region + Sub.Category + Gross.Margin,
data = train,
trControl = trainControl(method = "cv", number = 5),
method = "lm"
)
lm_mult
summary(lm_mult)
knitr::opts_chunk$set(echo = TRUE)
options(warn=-1)
# Installs
#install.packages("caret")
#install.packages("car")
#install.packages("ggplot2")
#install.packages("devtools")
# Libraries
library(knitr)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(ggcorrplot)
library(devtools)
library(caret)
library(car)
library(kableExtra)
library(ggpubr)
# Read the dataset
file_path <- getwd()
paste(file_path)
df_capac <- read.csv(paste0(file_path, "/installed-solar-PV-capacity.csv"),header=TRUE)
df_capit <- read.csv(paste0(file_path, "/per-capita-solar.csv"),header=TRUE)
df_prim <- read.csv(paste0(file_path, "/primary-energy-consumption-from-solar.csv"),header=TRUE)
df_shar <- read.csv(paste0(file_path, "/share-electricity-solar.csv"),header=TRUE)
df_consump <- read.csv(paste0(file_path, "/solar-energy-consumption.csv"),header=TRUE)
df_cumcapac <- read.csv(paste0(file_path, "/solar-pv-cumulative-capacity.csv"),header=TRUE)
df_pris <- read.csv(paste0(file_path, "/solar-pv-prices.csv"),header=TRUE)
df_totconsumpcapita <- read.csv(paste0(file_path, "/per-capita-energy.csv"), header=TRUE)
df_capac[1:150,] %>%
kable(format = "html", col.names = colnames(df_capac)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300px")
df_capit[1:150,] %>%
kable(format = "html", col.names = colnames(df_capit)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300px")
df_prim[1:150,] %>%
kable(format = "html", col.names = colnames(df_prim)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300px")
df_shar[1:150,] %>%
kable(format = "html", col.names = colnames(df_shar)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300px")
df_consump[1:150,] %>%
kable(format = "html", col.names = colnames(df_consump)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300px")
df_cumcapac[1:150,] %>%
kable(format = "html", col.names = colnames(df_cumcapac)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300px")
df_pris[1:150,] %>%
kable(format = "html", col.names = colnames(df_pris)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300px")
df_totconsumpcapita[1:150,] %>%
kable(format = "html", col.names = colnames(df_totconsumpcapita)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300ppx")
# Read the dataset
file_path <- getwd()
paste(file_path)
df_capac <- read.csv(paste0(file_path, "/installed-solar-PV-capacity.csv"),header=TRUE)
df_capit <- read.csv(paste0(file_path, "/per-capita-solar.csv"),header=TRUE)
df_prim <- read.csv(paste0(file_path, "/primary-energy-consumption-from-solar.csv"),header=TRUE)
df_shar <- read.csv(paste0(file_path, "/share-electricity-solar.csv"),header=TRUE)
df_consump <- read.csv(paste0(file_path, "/solar-energy-consumption.csv"),header=TRUE)
df_cumcapac <- read.csv(paste0(file_path, "/solar-pv-cumulative-capacity.csv"),header=TRUE)
df_pris <- read.csv(paste0(file_path, "/solar-pv-prices.csv"),header=TRUE)
df_totconsumpcapita <- read.csv(paste0(file_path, "/per-capita-energy.csv"), header=TRUE)
df_capac[1:150,] %>%
kable(format = "html", col.names = colnames(df_capac)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300px")
df_capit[1:150,] %>%
kable(format = "html", col.names = colnames(df_capit)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300px")
df_prim[1:150,] %>%
kable(format = "html", col.names = colnames(df_prim)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300px")
df_shar[1:150,] %>%
kable(format = "html", col.names = colnames(df_shar)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300px")
df_consump[1:150,] %>%
kable(format = "html", col.names = colnames(df_consump)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300px")
df_cumcapac[1:150,] %>%
kable(format = "html", col.names = colnames(df_cumcapac)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300px")
df_pris[1:150,] %>%
kable(format = "html", col.names = colnames(df_pris)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300px")
df_totconsumpcapita[1:150,] %>%
kable(format = "html", col.names = colnames(df_totconsumpcapita)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300ppx")
setwd("~/Luis/Universidad/Master_DS/Github_repositories/Business_economic_and_financial_data")
# Read the dataset
file_path <- getwd()
paste(file_path)
df_capac <- read.csv(paste0(file_path, "/installed-solar-PV-capacity.csv"),header=TRUE)
df_capit <- read.csv(paste0(file_path, "/per-capita-solar.csv"),header=TRUE)
df_prim <- read.csv(paste0(file_path, "/primary-energy-consumption-from-solar.csv"),header=TRUE)
df_shar <- read.csv(paste0(file_path, "/share-electricity-solar.csv"),header=TRUE)
df_consump <- read.csv(paste0(file_path, "/solar-energy-consumption.csv"),header=TRUE)
df_cumcapac <- read.csv(paste0(file_path, "/solar-pv-cumulative-capacity.csv"),header=TRUE)
df_pris <- read.csv(paste0(file_path, "/solar-pv-prices.csv"),header=TRUE)
df_totconsumpcapita <- read.csv(paste0(file_path, "/per-capita-energy.csv"), header=TRUE)
df_capac[1:150,] %>%
kable(format = "html", col.names = colnames(df_capac)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300px")
df_capit[1:150,] %>%
kable(format = "html", col.names = colnames(df_capit)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300px")
df_prim[1:150,] %>%
kable(format = "html", col.names = colnames(df_prim)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300px")
df_shar[1:150,] %>%
kable(format = "html", col.names = colnames(df_shar)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300px")
df_consump[1:150,] %>%
kable(format = "html", col.names = colnames(df_consump)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300px")
df_cumcapac[1:150,] %>%
kable(format = "html", col.names = colnames(df_cumcapac)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300px")
df_pris[1:150,] %>%
kable(format = "html", col.names = colnames(df_pris)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300px")
df_totconsumpcapita[1:150,] %>%
kable(format = "html", col.names = colnames(df_totconsumpcapita)) %>%
kable_styling() %>%
kableExtra::scroll_box(width = "100%", height = "300ppx")
df_capacity <- subset(df_capac, Entity = 'World')
# df_capacity <- df_capacity %>% group_by(Year) %>%
#   summarise(Solar.Capacity=sum(df_capac$Solar.Capacity))
df_capita <- subset(df_capit, Entity = 'World')
# df_capita <- df_capita %>% group_by(Year) %>%
#   summarise(Solar.Per.Capita=sum(df_capit$Solar.per.capita..kWh...equivalent.))
df_primary <- subset(df_prim, Entity = 'World')
# df_primary <- df_primary %>% group_by(Year) %>%
#   summarise(Solar.TWh.Equivalent=sum(df_prim$Solar..TWh...equivalent.))
# df_share <- df_shar %>% group_by(Year) %>%
#   summarise(Solar.TWh.Equivalent=sum(df_shar$Solar..TWh...equivalent.))
df_consumption <- subset(df_consump, Entity = 'World')
# df_consumption <- df_consumption %>% group_by(Year) %>%
#   summarise(Electricity.consumption.TWh=sum(df_consump$Electricity.from.solar.TWh.))
df_cumcap <- subset(df_cumcapac, Entity = 'World')
# df_cumcap <- df_cumcap %>% group_by(Year) %>%
#   summarise(Cumulative.Capacity = sum(df_cumcap$Solar.Capacity))
df_price <- subset(df_pris, Entity = 'World')
# df_price <- df_price %>% group_by(Year) %>%
#   summarise(Price.PV.Module = sum(df_pris$Solar.PV.Module.Cost..2019.US..per.W.))
df_totconsump <- subset(df_totconsumpcapita, Entity = 'World')
# df_totconsump <- df_totconsump %>% group_by(Year) %>%
df <- merge(df_capacity,df_capita,by="Year")
View(df)
View(df_capacity)
df_capacity <- subset(df_capac, Entity = 'World')
# df_capacity <- df_capacity %>% group_by(Year) %>%
#   summarise(Solar.Capacity=sum(df_capac$Solar.Capacity))
View(df_capacity)
df_capacity <- subset(df_capac, Entity = 'World')
df_capacity <- df_capacity %>% group_by(Year) %>%
summarise(Solar.Capacity=sum(df_capac$Solar.Capacity))
View(df_capacity)
View(df_capac)
df_capacity <- subset(df_capac, Entity = 'World')
View(df_capacity)
